// Copyright (c) Open Enclave SDK contributors.
// Licensed under the MIT License.

GLOBAL_ERROR = null

AGENTS_LABELS = [
    "ubuntu-nonsgx":            env.UBUNTU_NONSGX_CUSTOM_LABEL ?: "nonSGX",
]

// This job uses a backend API to call and trigger jobs behind Intel's firewall through a webpoller, 
// test logic is not located here. This trigger uses a versioned docker image to call the webpoller. 
// Script is https://github.com/openenclave/test-infra/blob/master/scripts/intel/jenkins_trigger.py
// Jenkinsfiles and actual testing logic located <TBD>
def TriggerIntelJob(String jobname) {
    stage("${jobname}") {
        node("nonSGX") {
            withCredentials([
                    usernamePassword(credentialsId: 'intel-jenkins-builder', passwordVariable: 'INTEL_TOKEN', usernameVariable: 'JENKINS_USER'),
                    string(credentialsId: 'intel-jenkins-url', variable: 'INTEL_URL')]) {
                
                // This image contains tools for interacting with webpollers and does not impact the logic of the testing enforced. As different parties 
                // have different IT and infrastracture requirements, this was easier to version and maintain via containers that are publicly accessible and debuggable.
                def image = docker.image('openenclave/jenkinsoperator:intel')
                image.pull()
                image.inside() {
                    dir("${WORKSPACE}") {
                        sh "python3 /scripts/intel/jenkins_trigger.py --job Pipelines/job/${jobname} --jenkins-user ${JENKINS_USER} --url ${INTEL_URL} --jenkins-password ${INTEL_TOKEN} --sleep 60"
                    }
                }
            }
        }
    }
}

try{
    // We only test against the Intel infrastructure if full test is enabled. As the Intel CI 
    // Jenkinsfiles are not integrated yet we have no sanity check, no need to not block PR's.

    if(FULL_TEST_SUITE == "true") {
        def testing_stages = [
        "Intel Agnostic-SGX-FLC-Linux ":                { TriggerIntelJob('Agnostic-SGX-FLC-Linux')},
        "Intel Agnostic-SGX1-Linux ":                   { TriggerIntelJob('Agnostic-SGX1-Linux')}
        ]
        parallel testing_stages
    }
} catch(Exception e) {
    println "Caught global pipeline exception: " + e
    GLOBAL_ERROR = e
    throw e
} finally {
    currentBuild.result = (GLOBAL_ERROR != null) ? 'FAILURE' : "SUCCESS"
}
